name: Deploy to Production

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  # ==============================================
  # CODE QUALITY & TESTING
  # ==============================================
  test:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, json, bcmath, pdo, sqlite, pdo_sqlite
          coverage: none
          
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress
        
      - name: Copy .env file
        run: cp .env.example .env
        
      - name: Generate application key
        run: php artisan key:generate
        
      - name: Create SQLite database
        run: touch database/database.sqlite
        
      - name: Run database migrations
        run: php artisan migrate --force
        
      - name: Run PHPStan static analysis
        run: ./vendor/bin/phpstan analyse --memory-limit=1G --no-progress
        
      - name: Run Laravel Pint code style check
        run: ./vendor/bin/pint --test
        
      - name: Run PHP Insights quality check
        run: php artisan insights --no-interaction --min-quality=90 --min-complexity=75 --min-architecture=90 --min-style=90
        continue-on-error: true
        
      - name: Run PHPUnit tests
        run: php artisan test
        continue-on-error: true

  # ==============================================
  # BUILD FRONTEND ASSETS
  # ==============================================
  build:
    name: Build Frontend Assets
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, json, bcmath
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies with pnpm
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Build frontend assets
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-assets
          path: public/build
          retention-days: 1

  # ==============================================
  # DEPLOY TO PRODUCTION
  # ==============================================
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    needs: [test, build]
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, json, bcmath
          coverage: none
          
      - name: Install Composer dependencies (production)
        run: composer install --no-dev --optimize-autoloader --no-interaction --no-progress --prefer-dist
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-assets
          path: public/build
          
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy with Deployer
        env:
          DOT_ENV: ${{ secrets.DOT_ENV }}
        run: |
          vendor/bin/dep deploy ${{ github.event.inputs.environment || 'production' }} \
            --revision="${{ github.sha }}" \
            --branch="${{ github.ref_name }}"
            
      - name: Deployment notification
        if: success()
        run: |
          echo "✅ Deployment to ${{ github.event.inputs.environment || 'production' }} completed successfully!"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          
      - name: Deployment failed notification
        if: failure()
        run: |
          echo "❌ Deployment to ${{ github.event.inputs.environment || 'production' }} failed!"
          echo "Please check the logs and consider rolling back."

  # ==============================================
  # POST-DEPLOYMENT VERIFICATION
  # ==============================================
  verify:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.APP_URL }}/up)
          if [ "$response" != "200" ]; then
            echo "❌ Health check failed with status code: $response"
            exit 1
          else
            echo "✅ Health check passed"
          fi
          
      - name: Verify deployment
        run: |
          echo "✅ Deployment verified successfully!"
          echo "Application URL: ${{ secrets.APP_URL }}"

